#!/usr/bin/env node

const _ = require("lodash");
const path = require('path')
const RepeaterBook = require("./src/RepeaterBook");
const { sortedUniq, readFile, writeFile, jsonify, debug, parseArgCSVRequired } = require("./src/Utils");

(async () => {

  const config = await readFile(path.resolve(__dirname, "config.json"));
  
  const states = parseArgCSVRequired(2, "state");
  
  const rb = new RepeaterBook(config.repeater_book);

  let result;

  if (process.env.MOCK) {
    const repeaterResultSet = [];
    for (const state of states) {
      const file = path.resolve(__dirname, "mocks",`mock.${state}.json`);
      debug(1)(`Checking mock file: ${file} for state: ${state}`);
      try {
        result = await readFile(file);
      } catch(err) {
        result = await rb.getByStateAndBand({
          state,
        });
        await writeFile(file, jsonify(result));
      }
      console.log(rb.getUniq(result.results));
      repeaterResultSet.push(result.results);
    }
    
    const bands = parseArgCSVRequired(3, "band");

    const filters = [
      {bands},
//      {counties: ["Bonner","Kootenai"]},
//      {cities: ["Sandpoint"]},//subsequent filters are recursively reduced
      {cities: ["Sandpoint","Kalispell"], counties: ["Kootenai"]},//same level filters join the data
    ];
   
    let rsResult = repeaterResultSet;

    for (const filter of filters) {
      const { repeatersMerged, count } = rb.getRepeaters(rsResult, filter);
      debug(1)(`Got ${count} from filter: ${jsonify(filter)}`);
      rsResult = [repeatersMerged];
    }

    rsResult = rsResult[0];

    console.log(_.map(rsResult, rb.getRepeaterString));

    console.log(rsResult.length);

  } else {
    for (const state of states) {
      result = await rb.getByStateAndBand({
        state,
      });
      console.log(rb.getUniq(result));
    };
  }
  
})();
