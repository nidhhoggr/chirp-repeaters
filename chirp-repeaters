#!/usr/bin/env node

const _ = require("lodash");
const path = require('path')
const RepeaterExtractor = require("./src/RepeaterExtractor");
const ChirpTransformer = require("./src/ChirpTransformer");
const RepeaterBook = require("./src/RepeaterBook");
const { sortedUniq, readFile, writeFile, jsonify, debug, parseArgCSVRequired, parseArgOptional } = require("./src/Utils");

function help() {
console.log(`
Chirp-Repeaters
  A tool to extract a list of repeaters from repeater book into a Chirp import file

Author: Joseph Persie

Usage:
  State and a Band without a filter:
    CACHE=1 ./chirp-repeaters ID 2m
  A State, Band, County and City:
    CACHE=1 ./chirp-repeaters ID 2m '[{"counties":["Bonner"]},{"cities":["Sandpoint"]}]'
  Using multiple filters using subset exclusivity: (all cities must belong to the counties specified)
    CACHE=1 ./chirp-repeaters ID 2m '[{"counties":["Bonner","Kootenai"]},{"cities":["Sandpoint","Athol"]}]'
  Joining results of multiple filters without subset exclusivity: (filters are not mutual)
    CACHE=1 ./chirp-repeaters ID,MT 2m,70cm '{"cities": ["Sandpoint","Kalispell"], "counties": ["Kootenai"]}'

Environment Variables:
  CACHE: whether or not to use the cached results
`);
}

(async () => {

  const config = await readFile(path.resolve(__dirname, "config.json"))

  if (process.env.CACHE) {
    config.use_cache = true;
  }

  const states = parseArgCSVRequired(2, "state", help);
  const bands = parseArgCSVRequired(3, "band", help);
  const thirdArg = parseArgOptional(4);
  let filters = [
    {bands},
  ];
  let csvOutputFile;
  if (thirdArg) {
    if (_.isObject(thirdArg)) {
      filters = _.concat(filters, thirdArg);
      const fourthArg = parseArgOptional(5);
      if (fourthArg) {
        csvOutputFile = fourthArg;
      }
    } else {
      //the third arg might be the csv file
      csvOutputFile = thirdArg;
    }
  }

  const re = new RepeaterExtractor(config);
  const extracted = await re.extract({props: {states, filters}});
  debug(1)(_.map(extracted, RepeaterBook.getRepeaterString));
  if (extracted.length) {
    const ct = new ChirpTransformer();
    const csvContents = ct.transform(extracted).toCsv();
    if (csvOutputFile) {
      try {
        await writeFile(csvOutputFile, csvContents);
        debug(1)(`Contents written to: ${csvOutputFile}`);
      } catch(err) {
        console.error(`Could not write to: ${csvOutputFile}`);
        console.error(err);
      }
    }
  }
})();
